#!/usr/bin/env python3

import socket
import ipaddress
import random
import logging
import argparse
import select
import struct
import sys

def main():
    BOOTP_STRUCT = struct.Struct('!cccc4s2s2s4s4s4s4s16s64s128s')

    parser = argparse.ArgumentParser()
    parser.add_argument('-H', '--host', required=True, type=str, help='address or name of the DHCP server')
    parser.add_argument('-r', '--relay', required=True, type=str, help='relay host address')
    parser.add_argument('-n', '--network', required=True, type=str, help='network that should be requested')
    parser.add_argument('-m', '--mask', required=True, type=str, help='netmask for the network in dotted format')
    parser.add_argument('-t', '--timeout', default=10, type=int, help='time before the request times out (default: 10)')
    parser.add_argument('-l', '--listen', default='0.0.0.0', type=str, help='listen address')
    parser.add_argument('--verbose', '-v', action='count', help='increase the log level')

    args = parser.parse_args()

    if not args.verbose:
        level = logging.ERROR
    elif args.verbose is 1:
        level = logging.WARNING
    elif args.verbose is 2:
        level = logging.INFO
    elif args.verbose >= 3:
        level = logging.DEBUG

    logging.basicConfig(level=level)

    xid = random.randint(0, 2**(4*8)).to_bytes(4,byteorder='big')
    try:
        dhcp_host = ipaddress.IPv4Address(args.host)
    except ipaddress.AddressValueError:
        host = socket.gethostbyname(args.host)
        dhcp_host = ipaddress.IPv4Address(host)

    gateway_address = ipaddress.IPv4Address(args.relay)


    subnet_mask = ipaddress.IPv4Address(args.mask)
    subnet = ipaddress.IPv4Address(args.network)
    PORT = 67

    DHCP = BOOTP_STRUCT.pack(b'\x01', b'\x01', b'\x06', b'\x00', xid, b'\x00', b'\x08',
                      b'\x00', b'\x00', b'\x00\x00\x00\x00',
                      int(gateway_address).to_bytes(4,byteorder='big'),
                      b'\xF6\xEB\x05\xFA\x53\x0C', b'\x00', b'\x00')

    DHCP_MAGIC_COOKIE = b'\x63\x82\x53\x63'

    DHCP_SUBNET_MASK = struct.pack("!cc4s", b'\x01',b'\x04',int(subnet_mask).to_bytes(4, byteorder='big'))
    DHCP_SUBNET =  struct.pack("!cc4s", b'\x76',b'\x04',int(subnet).to_bytes(4, byteorder='big'))
    DHCP_MESSAGE = struct.pack("!ccc", b'\x35', b'\x01', b'\x01')
    DHCP_END_FIELD = b'\xFF'

    DHCP_OPTIONS = DHCP_MAGIC_COOKIE+DHCP_MESSAGE+DHCP_SUBNET_MASK+DHCP_SUBNET+DHCP_END_FIELD
    dhcp_request = DHCP+DHCP_OPTIONS

    logging.debug("DHCP REQUEST: {}".format(dhcp_request))

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind(('0.0.0.0', PORT))

    sock_send = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.sendto(dhcp_request, (str(dhcp_host), PORT))

    ready = select.select([sock], [], [], args.timeout)
    if ready[0]:
        data = sock.recv(BOOTP_STRUCT.size)
        logging.debug("DHCP RESPONSE: {}".format(data))
        dhcp_values = BOOTP_STRUCT.unpack(data[:BOOTP_STRUCT.size])
        op, htyp, hlen, hops, rxid, secs, flags, ciaddr, yiaddr, siaddr, giaddr, chaddr, sname, file = dhcp_values

        logging.info('XID: 0x{}'.format(rxid.hex()))
        try:
            logging.info('Your IP: {}'.format(ipaddress.IPv4Address(yiaddr)))
        except ipaddress.AddressValueError as e:
            print(e)
            sys.exit(2)
        logging.info('Server IP: {}'.format(ipaddress.IPv4Address(siaddr)))
        logging.info('Gateway IP: {}'.format(ipaddress.IPv4Address(giaddr)))
        logging.info('Client MAC: {}'.format(chaddr[:6].hex()))
        logging.info('Server name: {}'.format(sname.decode()))


        if xid != rxid:
            print("XIDs did not match")
            sys.exit(2)
        sys.exit(0)
    else:
        print("DHCP Server unreachable")
        sys.exit(2)


if __name__== '__main__':
    main()
